// MODULE STATE & ID
var count = 0
const [cwd, dir] = [process.cwd(), __filename].map(x => new URL(x, 'file://').href)
const ID = dir.slice(cwd.length)
const STATE = { ids: {}, net: {} } // all state of component module
//  ----------------------------------------
const sheet = new CSSStyleSheet()
sheet.replaceSync(get_theme())
const shopts = { mode: 'closed' }
//  ----------------------------------------
module.exports = task_explorer
//  ----------------------------------------
async function task_explorer (opts, protocol) {
  // ----------------------------------------
  // ID + JSON STATE
  // ----------------------------------------
  const id = `${ID}:${count++}` // assigns their own name
  const status = {}
  const state = STATE.ids[id] = { id, status, wait: {}, net: {}, aka: {} } // all state of component instance
  const { users } = opts
  const json_data = [
    {id: 0, name: 'roadmap', type: 'task', root: true, children: [1, 2], chat: [{username: 'ana', content: 'Hello'}, {username: 'bob', content: 'Hello'}] },
    {id: 1, name: 'UI/UX design', type: 'task', children: [3, 4] },
    {id: 2, name: 'implementation', type: 'task', children: [5, 6] },
    {id: 3, name: 'design button', type: 'task', outputs: [7], children: [8, 10]},
    {id: 4, name: 'design searchbar', type: 'task'},
    {id: 5, name: 'implement button', type: 'task', inputs: [7, 9, 11], outputs: [12, 13, 14], children: [15]},
    {id: 6, name: 'implement searchbar', type: 'task'},
    {id: 7, name: 'button repo', type: 'io', children: [5, 6]},
    {id: 8, name: 'make button icon', type: 'task', outputs: [9]},
    {id: 9, name: 'button icon.svg', type: 'io', children: [5, 6]},
    {id: 10, name: 'wireframe button', type: 'task', outputs: [11]},
    {id: 11, name: 'button.fig', type: 'io', children: [5, 6]},
    {id: 12, name: 'button.js', type: 'io'},
    {id: 13, name: 'button.css', type: 'io'},
    {id: 14, name: 'button.html', type: 'io'},
    {id: 15, name: 'write button js, css, and html', type: 'task'},
  ]
  const name = 'task_explorer'
  let selected_task
  let chat_task
  let code_words = {inputs: 'io', outputs: 'io', children: 'task'}
  // ----------------------------------------
  // PROTOCOL
  // ----------------------------------------
  const on = { 
    'on_add_task': on_add_task,
    'handle_add': handle_add,
    'send': send,
    'get_chat': get_chat,
    'post_msg': post_msg,
    'handle_invite': handle_invite,
    'on_invite': on_invite
  }
  const channel_up = use_protocol('up')({ protocol, state, on })
  // ----------------------------------------
  // TEMPLATE
  // ----------------------------------------
  const el = document.createElement('div');
  const shadow = el.attachShadow(shopts)
  shadow.adoptedStyleSheets = [sheet]
  shadow.innerHTML = `
    <main>
    </main>`
  // ----------------------------------------
  const task_tree = shadow.querySelector('main')
  // ----------------------------------------
  // INIT
  // ----------------------------------------
  fill_task_tree()
  return el

  async function fill_task_tree () {
    task_tree.innerHTML = ''
    task_tree.append(...json_data.filter(data => data.root).map(add_task))
  }
  function add_task (data) {
    const element = document.createElement('div')
    element.classList.add(data.type, 'node')
    element.tabIndex = '0'
    element.id = 'a'+data.id
    element.innerHTML = `
      <div class="inputs nodes">
      </div>
      <div class="task_name">
        ${data.name}
      </div>
      <div class="outputs nodes">
      </div>
      <div class="children nodes">
      </div>
    `
    const task_name = element.querySelector('.task_name')
    const outputs = element.querySelector('.outputs')
    const inputs = element.querySelector('.inputs')
    const children = element.querySelector('.children')
    task_name.onclick = () => {
      element.classList.toggle('show')
      selected_task = element
      selected_task.focus()
      selected_task.addEventListener('blur', e => {
        if(e.relatedTarget && e.relatedTarget.classList.contains('noblur'))
          return
        selected_task = undefined
      })
      if(data.outputs && outputs.children.length < 1){
        for(const i of data.outputs){
          outputs.append(add_task(json_data[i]))
        }
        outputs.classList.add('padding')
      }
      if(data.children && children.children.length < 1){
        for(const i of data.children){
          children.append(add_task(json_data[i]))
        }
        children.classList.add('padding')
        outputs.classList.add('border')
      }
      if(data.inputs && inputs.children.length < 1){
        for(const i of data.inputs){
          inputs.append(add_task(json_data[i]))
        }
        inputs.classList.add('padding')
      }
    }
    
    
    return element
  }
  async function add_node (name, type, parent_id){
    const node_id = json_data.length
    json_data.push({ id: node_id, name, type: code_words[type] })
    if(parent_id){
      const children = json_data[parent_id.slice(1)][type]
      if(children !== undefined)
        children.push(json_data.length)
      else
        json_data[parent_id.slice(1)][type] = [node_id]
    }
    else{
      json_data[node_id].root = true
      json_data[node_id].users = [opts.host]
    }
  }
  async function on_add_task (data) {
    let tree_container
    if(data.id){
      const task = shadow.querySelector('#' + data.id)
      if(task)
        tree_container = task.querySelector('.'+data.type)
    }
    else
      tree_container = task_tree
    if(tree_container)
      tree_container.prepend(add_task({ name: data.name, id: json_data.length, type: code_words[data.type] }))
    add_node(data.name, data.type, data.id)
  }
  async function handle_add ({ data }) {
    data = data.trim().toLowerCase() + 's'
    if(data === 'tasks')
      data = 'children'
    const input = document.createElement('input')
    let tree_container, task_id
    if(selected_task){
      tree_container = selected_task.querySelector('.' + data)
      task_id = selected_task.id
    }
    else{
      tree_container = task_tree
      task_id = ''
    }

    tree_container.prepend(input)
    input.onkeydown = async (event) => {
      if (event.key === 'Enter') {
        tree_container.firstElementChild.remove()
        tree_container.prepend(add_task({ name: input.value, id: json_data.length, type: code_words[data] }))
        add_node(input.value, data, task_id)
        if(task_id)
          channel_up.send({
            head: [id, channel_up.send.id, channel_up.mid++],
            type: 'send',
            data: {to: 'task_explorer', route: ['up', 'task_explorer'], users, type: 'on_add_task', data: {name: input.value, id: task_id, type: data} }
          })
      }
    }
    input.focus()
  }
  async function send ({ data }) {
    const {to, route} = data
    if(to === name){
      const {type, data: shuttle_data} = data
      on[type](shuttle_data)
      return
    }
    const channel = state.net[state.aka[route[0]]]
    data.route = data.route.slice(1)
    channel.send({
      head: [id, channel.send.id, channel.mid++],
      type: 'send',
      data
    })
  }
  async function get_chat () {
    const node = json_data[Number(selected_task.id.slice(1))]
    channel_up.send({
      head: [id, channel_up.send.id, channel_up.mid++],
      type: 'set_chat',
      data: {chat_data: node.chat, chat_id: node.id}
    })
    
    if(chat_task)
      chat_task.classList.remove('chat_focus')
    chat_task = selected_task
    chat_task.classList.add('chat_focus')
  }
  async function post_msg ({ data }) {
    const node = json_data[Number(data.chat_id)]
    node.chat.push({ username: data.username, content: data.content })
  }
  async function handle_invite ({ data }) {
    const node = json_data[Number(selected_task.id.slice(1))]
    channel_up.send({
      head: [id, channel_up.send.id, channel_up.mid++],
      type: 'send',
      data: {to: 'task_explorer', route: ['up', 'task_explorer'], users: [data], type: 'on_invite', data: node }
    })
  }
  async function on_invite (data) {
    const {name, id, type} = data
    task_tree.prepend(add_task({ name, id, type }))
    json_data.push(data)
  }
}

function get_theme () {
  return `
  .task{
    cursor: pointer;
    margin: 5px 0;
    margin-left: 10px;
  }
  .task > .task_name::before{
    content: '\\251C \\2795 \\2500';
  }
  .task:last-child > .task_name::before{
    content: '\\2514 \\2795 \\2500';
  }
  .task.show > .task_name::before{
    content: '\\251C \\2796 \\2500';
  }
  .task.show:last-child > .task_name::before{
    content: '\\2514 \\2796 \\2500';
  }
  
  .node > .nodes{
    display: none;
    margin: 5px 0;
    padding-left: 5px;
    margin-left: 0;
    border-left: 1px solid white;
    position: relative;
  }
  .task:last-child > .children,
  .task:last-child > .outputs{
    border-color: transparent;
  }

  .task .task_name{
    margin-left: -5px;
  }
   .input.padding:first-child,
   .children.padding:first-child{
    padding-top: 5px;
  }
   .output.padding:last-child,
   .children.padding:last-child{
    padding-bottom: 5px
  }
   .inputs > .io > .task_name::before{
    content: '\\251C \\1F4E5 \\2500';
  }
   .inputs > .io:first-child > .task_name::before{
    content: '\\250C \\1F4E5 \\2500';
  }
   .outputs > .io > .task_name::before{
    content: '\\251C \\1F4E4 \\2500';
  }
   .outputs > .io:last-child > .task_name::before{
    content: '\\2514 \\1F4E4 \\2500';
  }
   .io{
    padding-left: 15px;
    margin-left: 10px;
  }
  .outputs.border > .io{
    border-left: 1px solid white;
  }
  .task:focus{
    background-color: #222;
  }
  .task.chat_focus > .task_name::after{
    content: '';
    background-color: green;
    border-radius: 100%;
    width: 10px;
    height: 10px;
    display: inline-block;
  }
  .node.show > .nodes{
    display: block;
  }
  `
}
function use_protocol (petname) {
  return ({ protocol, state, on = { } }) => {
    if (petname in state.aka) throw new Error('petname already initialized')
    const { id } = state
    const invalid = on[''] || (message => console.error('invalid type', message))
    if (protocol) return handshake(protocol(Object.assign(listen, { id })))
    else return handshake
    // ----------------------------------------
    // @TODO: how to disconnect channel
    // ----------------------------------------
    function handshake (send) {
      state.aka[petname] = send.id
      const channel = state.net[send.id] = { petname, mid: 0, send, on }
      return protocol ? channel : Object.assign(listen, { id })
    }
    function listen (message) {
      const [from] = message.head
      const by = state.aka[petname]
      if (from !== by) return invalid(message) // @TODO: maybe forward
      console.log(`[${id}]:${petname}>`, message)
      const { on } = state.net[by]
      const action = on[message.type] || invalid
      action(message)
    }
  }
}
