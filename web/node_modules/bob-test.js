module.exports = [require, bob_js]

async function bob_js (node) { // BOB.js
  document.body.innerHTML = '<h1>bob-test</h1>'
  document.body.style = 'background: pink;'
  // document.body.innerHTML = localStorage.bob


  // const args_ana = [{ name: 'ana', pk: `6789ana`, sk: `9876oiuy` }]
  // const args_bob = [{ name: 'bob', pk: `1234bob`, sk: `4321fdsa` }]
  // void ANA_js({ args: args_ana  }) // ANA.js
  // .then(o => BOB_js({ args: args_bob.concat(o) })) // BOB.js
  const args_ana = [{ name: 'ana', pk: `6789ana`, sk: `9876oiuy` }]
  const ana_id = args_ana[0].pk
  const args_bob = [{ name: 'bob', pk: `1234bob`, sk: `4321fdsa` }]
  // --------------------------------------
  // SETUP
  const { io, db, state, config: args } = node
  // const TM = require('tm')
  const [opts, peer_id = ana_id] = args_bob || args
  // const tm = await TM(db)
  db.on((book_id, data) => {
    console.log('from book', book_id, opts.name, 'received msg', data)
   })
  // CONNECT
  const on = { on_rx, connect }
  io.on(port => {
    console.log('[BOB:IO]:connecting', port)
    port.onmessage = ({ data: msg }) => on[msg.type](msg)
    state.net[peer_id] = port
  })
  await io.at(peer_id)
  state[`${state.id}-${peer_id}`] = db({ name: `${state.id}-${peer_id}` })
  state.net[peer_id].postMessage({ head: {from: state.id, to: peer_id}, type: 'connect', data: state[`${state.id}-${peer_id}`].key })
  // create_task({ title: 'task1', parent: '' })
  // on_tx({ head: {from: state.id, to: peer_id}, type: 'on_join', data: state.tasks['0'] })
  // --------------------------------------

  bob()
  return
  function bob (c = 999) {
    const clearTimeout = window.clearTimeout
    // const id = setInterval(() => {
    //   console.log('bob', localStorage.bob = c--)
    // }, 1000)
    const B = document.createElement('button')
    B.onclick = () => clearTimeout(id)
    B.textContent = 'stop bob'
    document.body.append(B)
  }
  // --------------------------------------
  async function connect ({ head, data }, port) {
    state.net[head.from] = port
    state[`${head.from}-${state.id}`] = db({ name: `${head.from}-${state.id}`, key: data })
    on_tx({ head: {from: state.id, to: peer_id}, type: 'on_rx', data: 'Hi' })
  }
  async function on_rx ({ head, data }){
    state[`${head.from}-${state.id}`] = db.reader(`${head.from}-${state.id}`, head.from)
    const msg = await state[`${head.from}-${state.id}`].get(data)
    console.log('Log from bob: ', msg)
    }
  async function on_tx (msg){
    const { head } = msg
    state[`${state.id}-${head.to}`].add(msg)
  }
  async function create_task (msg){
    const {index, task_id} = await tm.on_create(msg)
    state.tasks[task_id] = index
  }
}