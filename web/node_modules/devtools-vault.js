module.exports = [require, file]

async function file (node) {
  const { require, spawn, config } = node
  const tasks = {}

  document.body.style = 'margin: 0; height: 100vh; display: flex; flex-direction: column;'
  const grid = document.createElement('div')
  grid.style = 'flex-wrap: wrap; box-sizing: border-box; background-color: #333; color: white; flex-grow:1; display: flex;'
  document.body.innerHTML = `<h1> devtools vault </h1>`
  document.body.append(grid)

  Object.keys(config).map(name => {
    const app = Object.assign(document.createElement('div'), { id: name })
    const randomHsl = () => `hsla(${Math.random() * 360}, 100%, 65%, 1)`
    const c = randomHsl()
    app.style = `box-sizing: border-box; padding: 2px; flex-grow: 1; background-color: ${c};`
    const shadow = app.attachShadow({ mode: 'closed' })
    shadow.append(spawn(name, config[name], port => {
      port.onmessage = onmessage
      tasks[name] = port
    }))
    function onmessage ({ data, ports: [port] }) {
      console.log(`%c[(vault)]%c[by ${name.toUpperCase()}] recv`, 'color:green;', 'color:white;', data, port)
      console.log('@TODO: set up interaction')
    }
    grid.append(app)
  })
  // const ana = require('ana-test.js')
  // const bob = require('bob-test.js')
  // ;[`${bob}`, `${ana}`].map(ctrls)
  // console.log('%cHere: ', 'color: red;', ana, bob)
  // ana()
  // bob()
  return // console.log({ana, bob})
  async function ctrls (src, i) {
    const el = document.createElement('div')
    // div.append(el)
    const style = `border: 0; width: 30vw; height: 30vh; display: flex; background-color: ${i ? 'gray' : 'brown'};`
    const { port } = await spawn(el, `${src}`, style)


    // @TODO: make spawn append to real DOM, but don't expose element
    // -> or maybe do expose it, but only iframes, but that means here they could append other elements, including script tags and stuff
    // --> that is bad

    const txt = document.createTextNode('')
    const btn = document.createElement('button')
    boot()
    document.body.prepend(btn)
    tasks[i] = port
    function boot () {
      btn.onclick = stop
      btn.textContent = `stop peer ${i}`
      txt.replaceWith(el)
    }
    function stop () {
      btn.onclick = boot
      btn.textContent = `boot peer ${i}`
      el.replaceWith(txt)
    }
  }
}